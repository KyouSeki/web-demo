/*运算符
	1.一元运算符  ++  --  
	++自增运算,++写num前面代表先自增再赋值给num2,++写num后面则是先把num赋值给num2,再自增运算.*/
	
	/*2.位运算符(都是在二进制的基础下)
	  (1)按位与运算 &:先把数字换成2进制,然后每个位数对应进行与运算.
	  (2)按位或运算 |:先把数字换成2进制,然后每个位数对应进行或运算.
	  (3)按位非运算 ~:假如是整数取反,则得到的32位二进制数包括符号位全部取反,然后补码+1得到答案.
	  (4)按位异或 ^:两个数不相等时返回1,其他情况返回0;
	  (5)有符号左移(<<):符号位不动,其他位数往左移动x位
	  (6)有符号右移(>>):符号位不动,其他位数往右移动x位
	  (7)无符号右移(>>>):包括符号位在内全部往右移动x位
	  */
	  
var pt1 = 3;
var pt2 = 3;
var pt3 = num1 & num2;
	console.log(pt3);

//一个数的二进制和1进行按位与运算，等于1的肯定是奇数，等于0的肯定是偶数。
if(pt1&1){
	console.log(pt1&1);
	console.log("奇数");
}else{
	console.log("偶数");
}
	
	/*3.布尔操作符/逻辑运算符   与  或  非
	
	  (1)非!
	  (2)与&&
	  (3)或||
	  
	与或非运算有顺序,假设第一项满足条件以后第二项则不会执行,比如12>30为假,那么i++不会再进行下去
	var i =6;
	var testNum = 12<30 && i++
	 i=7
	 
	var testNum = 12>30 && i++
	 i=6
	 
	var testNum = 12>30 || i++
	 i=7
	 
	var testNum = 12<30 || i++
	 i=6
	
	  
	4.乘性操作符 
	  (1)乘法 *
	  (2)除法 /
	  (3)取余 %
	  
	5.加性运算符
	  (1)加法+ 加法可以运算字符串
	  (2)减法-
	  
	6.关系操作符
	  >  <  >=  <=  
	  字符串也可以比较大小,从首字母开始比较字母编码大小,和文字长度无关.
	  A<Z<a<z,
	  
	7.相等运算符
	  ==  !=  ===(三个等号不仅要值相等,还要数据类型也相等) !==
	
	8.赋值操作符:
	  = 赋值 
	  += 加一个数以后再赋值 
	  -= 减一个数以后再赋值
	  *= 乘一个数以后再赋值
	  /= 除以一个数以后再赋值 
	  %= 取一个数的余数以后再赋值
	  
	 9.逗号运算符
	  ,
	 
	 10.条件运算符/三元运算符
	  ? 这是一个逻辑运算,如果num1>num2 ,则num1的值附给max,否则num2的值赋给max.
	 var max = (num1 > num2 ) ? num1 : num2;*/
	
	
/*运算符顺序:算数运算符---比较运算符---逻辑运算符---"="赋值运算符
	同级的运算符是按从左到右的次序进行,多层括号由里向外.
	
	var rem = ((4+5)+7)-8 > 90+100 != 4+5+7-8 < 90+100
	console.log(rem);  ==true
*/


var num = "66";
var num1 = 10;
var num2 = 14%3;

var code1=77,code2=66;

var max = (code1> code2) ? code1 : code2
console.log(max);

num1 %=4;
console.log(num1);


if(num !== num1){
	console.log("num("+num+")=num1("+num1+")");
}else{
	console.log("num("+num+")=!num1("+num1+")");
}

//要求1,如果超过3000工资,则需要扣超过部分的5%的个人所得税,然后算最终所得工资

//要求2,输入一个值,每个位的数相加起来大于20,打8折.算最终的价格



